(define (twoOperatorCalculator lst)
  (cond
    ((= (length lst) 1) (car lst))
    (else
      (let func ((result (car lst)) (opr '+) (oprs (cdr lst)))
      (cond
        ((null? oprs) result)
        ((eq? '+ (car oprs))
        (func (+ result (cadr oprs)) '+ (cddr oprs)))
        ((eq? '- (car oprs))
        (func (- result (cadr oprs)) '- (cddr oprs)))
        (else (func result opr (cdr oprs)))
        )
      )
    )
  )
)

(define (fourOperatorCalculator lst)
  (if (eqv? (length lst) 1)
      lst
      (if (eqv? '* (cadr lst))
          (fourOperatorCalculator (cons (* (car lst) (caddr lst)) (cdddr lst)))
          (if (eqv? '/ (cadr lst))
            (fourOperatorCalculator (cons (/ (car lst) (caddr lst)) (cdddr lst)))
            (cons (car lst) (fourOperatorCalculator (cdr lst)))
          )
        )
    )
)

(define (Nested lst)
	(if (pair? lst)
	  (twoOperatorCalculator(fourOperatorCalculator (calculatorNested lst))) lst
  )
)

(define (calculatorNested lst)
  (if (eqv? (length lst) 0)
    '()
    (cons (Nested (car lst)) (calculatorNested (cdr lst)))
  )
)

(define (checkOperators lst)
  (cond
    ((null? lst) #f)
    ((not (pair? lst)) #f)
    ((and (number? (car lst)) (null? (cdr lst))) #t)
    ((and (pair? (car lst)) (null? (cdr lst))) (checkOperators (car lst)))
    ((and (number? (car lst))
      (or (eqv? '+ (cadr lst))
        (eqv? '- (cadr lst))
        (eqv? '/ (cadr lst))
        (eqv? '* (cadr lst))))
      (checkOperators (cddr lst)))
    ((and (pair? (car lst))
      (or (eqv? '- (cadr lst))
        (eqv? '+ (cadr lst))
        (eqv? '* (cadr lst))
        (eqv? '/ (cadr lst))))
      (and (checkOperators (car lst)) (checkOperators (cddr lst)))
    )
    (else #f)
  )
)

(define (calculator lst)
	(if (checkOperators lst)
	  (twoOperatorCalculator (fourOperatorCalculator (calculatorNested lst))) #f
  )
)